<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans	   
							http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context-3.2.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
							">
	 <!-- springMVC.XML 表现层配置文件，只应加装表现层Bean -->
	 
	 <!-- 对包进行扫描，实现注释驱动Bean定义，同时将bean自动注入容器中使用。即解决了@Controller标识的类的bean的注入和使用。  -->
	 <!-- <context:annotation-config/> -->
 
 	<!-- 引入配置文件 --> 
	<context:property-placeholder ignore-unresolvable="true" local-override="true" location="classpath:application.properties"/>
	
	<!-- 默认的注解映射的支持 -->  
    <mvc:annotation-driven validator="validator" conversion-service="conversion-service" />
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的ValidationMessages.properties -->
        <property name="validationMessageSource" ref="validatemessageSource"/>
    </bean>
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
    <bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <!-- classpath:validatemessages 为resources目录下的validatemessages.properties 文件 -->
        <property name="basename" value="classpath:validatemessages"/>  
        <property name="fileEncodings" value="utf-8"/>  
        <property name="cacheSeconds" value="120"/>  
	</bean> 
	
	<!--开启controller注解支持,把标记了@Controller注解的类转换为bean -->    
	<!-- 使用了 context:component-scan 标签 上面的 context:annotation-config 就不需要配置了 -->
	<!-- 注：如果base-package=cn.zml 则注解事务不起作用 TODO 读源码 -->
	<!-- 因为此处只应该加载表现层组件，如果此处还加载dao层或service层的bean会将之前容器加载的替换掉 -->
	<!-- 而且此处不会进行AOP织入，所以会造成AOP失效问题（如事务不起作用） -->
	<context:component-scan base-package="com.lyd.soft.action">
	    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 当访问主页时自动转发到/userAction/login_view控制器。 -->
	<mvc:view-controller path="/" view-name="forward:/loginAction/login_view"/>
	
	<!-- restful -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
	
	<!-- 视图处理器 -->
	<bean id="jspViewResolver"  
	    class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
	        <property name="prefix" value="/WEB-INF/jsp/" />  
	        <property name="suffix" value=".jsp" />  
	        <property name="contentType" value="text/html;charset=utf-8" />
	        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /> 
	</bean>

	<!-- 对静态资源文件的访问 -->  
	<!-- 所有的页面引用到css/**的资源都从css/*里面进行查找 -->
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/" cache-period="31556926"/>  
    <mvc:resources mapping="/css/**" location="/WEB-INF/css/" cache-period="31556926"/>
	<mvc:resources mapping="/images/**" location="/WEB-INF/images/" cache-period="31556926"/>
	<mvc:resources mapping="/fonts/**" location="/WEB-INF/fonts/" cache-period="31556926"/>
	<mvc:resources mapping="/css/skins/**" location="/WEB-INF/css/skins/" cache-period="31556926"/>
	<mvc:resources mapping="/kindeditor/**" location="/WEB-INF/kindeditor-4.1.10/" cache-period="31556926"/>
	<mvc:resources mapping="/UploadFile/photo/**" location="/UploadFile/photo/" cache-period="31556926"/>
	<mvc:resources mapping="/UploadFile/image/**" location="/UploadFile/image/" cache-period="31556926"/>
	
	<!-- 全局异常配置 -->  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <prop key="java.lang.Exception">error/500</prop>  
                <prop key="java.lang.RuntimeException">error/500</prop>  
                <prop key="java.lang.Throwable">error/500</prop>  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error/uploadError</prop>  
            </props>  
        </property>    
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->  
        <property name="warnLogCategory" value="WARN"></property>  
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->  
        <property name="defaultErrorView" value="error/500"></property>  
        <!-- 默认HTTP状态码 -->  
        <property name="defaultStatusCode" value="500"></property>  
    </bean>  
     

	<!-- 拦截器 -->
    <mvc:interceptors>
		<mvc:interceptor>
	    	<mvc:mapping path="/**" />
	    	<mvc:exclude-mapping path="/"/>
	    	<mvc:exclude-mapping path="/loginAction/login_view"/>
	    	<mvc:exclude-mapping path="/loginAction/login"/>
	    	<mvc:exclude-mapping path="/css/**"/>
	    	<mvc:exclude-mapping path="/js/**"/>
	    	<mvc:exclude-mapping path="/images/**"/>
	    	<mvc:exclude-mapping path="/fonts/**"/>
	    	<mvc:exclude-mapping path="/kindeditor/**"/>
	    	<bean class="com.lyd.soft.interceptor.LoginInterceptor" />
    	</mvc:interceptor>
    	<mvc:interceptor>
	    	<mvc:mapping path="/**/toList_page" />
	    	<mvc:exclude-mapping path="/"/>
	    	<mvc:exclude-mapping path="/loginAction/login_view"/>
	    	<mvc:exclude-mapping path="/loginAction/login"/>
	    	<mvc:exclude-mapping path="/css/**"/>
	    	<mvc:exclude-mapping path="/js/**"/>
	    	<mvc:exclude-mapping path="/images/**"/>
	    	<mvc:exclude-mapping path="/fonts/**"/>
	    	<mvc:exclude-mapping path="/kindeditor/**"/>
	    	<bean class="com.lyd.soft.interceptor.PaginationInterceptor" />
    	</mvc:interceptor>
    </mvc:interceptors>
	<!-- 上传配置 -->
	<!--  
		org.springframework.web.multipart.commons.CommonsMultipartResolver这个是
		spring的默认配置，但是kindEditor的request被拦截导致无法上传图片。
		重写CommonsMultipartResolver中的isMultipart方法解决问题。
		com.hdc.interceptors.DefaultMultipartResolver
	-->
	<bean id="multipartResolver" class="com.lyd.soft.interceptor.DefaultMultipartResolver">
		<property name="maxUploadSize" value="${upload.maxUploadSize}"/>  <!-- 最大10M -->
		<property name="uploadTempDir" value="${upload.uploadTempDir}"/>
		<property name="defaultEncoding" value="UTF-8"/>
	</bean>
</beans>